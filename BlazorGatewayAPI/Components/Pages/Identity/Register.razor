@page "/register"
@using BlazorGatewayAPI.Services
@using System.ComponentModel.DataAnnotations
@inject AuthorizationServiceClient AuthClient
@inject NavigationManager Navigation

<h3>Register</h3>

<EditForm Model="@Input" OnValidSubmit="@HandleRegister" FormName="registerForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Login</label>
        <InputText @bind-Value="Input.Login" class="form-control" />
        <ValidationMessage For="@(() => Input.Login)" />
    </div>

    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="Input.Email" class="form-control" />
        <ValidationMessage For="@(() => Input.Email)" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText type="password" @bind-Value="Input.Password" class="form-control" />
        <ValidationMessage For="@(() => Input.Password)" />
    </div>

    <div class="form-group">
        <label>Confirm Password</label>
        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" />
        <ValidationMessage For="@(() => Input.ConfirmPassword)" />
    </div>

    <div class="form-group">
        <label>Phone (optional)</label>
        <InputText @bind-Value="Input.Phone" class="form-control" />
        <ValidationMessage For="@(() => Input.Phone)" />
    </div>

    <button type="submit" class="btn btn-primary mt-3">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger mt-3">@ErrorMessage</div>
}

@code {
    private string? ErrorMessage { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    public class InputModel
    {
        [Required]
        public string Login { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [StringLength(50, MinimumLength = 1)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;

        [Phone]
        public string? Phone { get; set; }
    }

    private async Task HandleRegister()
    {
        ErrorMessage = null;

        var response = await AuthClient.RegisterAsync(
            Input.Login,
            Input.ConfirmPassword,
            Input.Email,
            Input.Phone
        );

        if (response.Success)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            ErrorMessage = response.Errors.FirstOrDefault() ?? "Registration failed";
        }
    }
}